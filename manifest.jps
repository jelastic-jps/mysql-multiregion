type: install
name: MySQL/MariaDB/Percona Multi-Region Cluster
id: mysql-multiregion-cluster
jpsVersion: '1.5.2'
description:
  text: A MySQL/MariaDB/Percona cluster that can be deployed across several regions with Primary-Primary/Primary-Secondary/Galera/XtraDB replication topologies.
  short: A set of Multi-Region database cluster topologies based on MySQL/MariaDB/Percona stacks.
logo: /images/mysql-mariadb-percona-logo.svg

categories:
  - apps/clustered-dbs
  - apps/popular
  - apps/clusters
  - apps/databases

baseUrl: https://raw.githubusercontent.com/sych74/mysql-multiregion/JE-73663
onBeforeInit: /scripts/onBeforeInit.js

settings:
  fields:
    - caption: Stack
      type: list
      name: stack
      default: mariadb-dockerized
      required: true
      values:        
        - value: mysql
          caption: MySQL CE
        - value: mariadb-dockerized
          caption: MariaDB
        - value: perconadb
          caption: Percona
      showIf:
        mysql:
        - type: dockertags
          caption: Database version
          nodeType: mysql
          name: tag
          hidden: false
        mariadb-dockerized:
        - type: dockertags
          caption: Database version
          nodeType: mariadb-dockerized
          name: tag
          hidden: false
        perconadb:
        - type: dockertags
          caption: Database version
          nodeType: perconadb
          name: tag
          hidden: false 

    - caption: Topology
      type: list
      name: scheme
      required: true      
      dependsOn:                 
        stack:
            mysql:
              - value: slave
                caption: Primary-Secondary
              - value: master
                caption: Primary-Primary
 
            mariadb-dockerized:    
              - value: slave
                caption: Primary-Secondary
              - value: master
                caption: Primary-Primary
              - value: galera-standalone
                caption: Galera cluster based on MariaDB standalone per region
              - value: galera-cluster
                caption: Galera cluster based on MariaDB Galera cluster per region

            perconadb:
              - value: slave
                caption: Primary-Secondary
              - value: master
                caption: Primary-Primary
              - value: xtradb-standalone
                caption: XtraDB cluster based on Percona standalone per region
              - value: xtradb-cluster
                caption: XtraDB cluster based on Percona XtraDB cluster per region
      showIf:
        slave:    
        - caption: Regions
          type: regionlist
          name: regions
          disableInactive: true
          selectFirstAvailable: false
          multiSelect: true
          stateful: false
          required: true
          dependsOn: ownerUid
          min: 2
          max: 5
          tooltip: "Nodes roles will be assigned according to order of selected region: Primary, Secondary"
          filter:
            isActive: true

        master:    
        - caption: Regions
          type: regionlist
          name: regions
          disableInactive: true
          selectFirstAvailable: false
          multiSelect: true
          stateful: false
          required: true
          dependsOn: ownerUid
          min: 2
          max: 5
          tooltip: "Nodes roles will be assigned according to order of selected region: Primary, Secondary"
          filter:
            isActive: true

        galera-standalone:    
        - caption: Regions
          type: regionlist
          name: regions
          disableInactive: true
          selectFirstAvailable: false
          multiSelect: true
          stateful: false
          required: true
          dependsOn: ownerUid
          min: 3
          max: 3
          filter:
            isActive: true

        galera-cluster:    
        - caption: Regions
          type: regionlist
          name: regions
          disableInactive: true
          selectFirstAvailable: false
          multiSelect: true
          stateful: false
          required: true
          dependsOn: ownerUid
          min: 3
          max: 3
          filter:
            isActive: true

        xtradb-standalone:    
        - caption: Regions
          type: regionlist
          name: regions
          disableInactive: true
          selectFirstAvailable: false
          multiSelect: true
          stateful: false
          required: true
          dependsOn: ownerUid
          min: 3
          max: 3
          filter:
            isActive: true

        xtradb-cluster:    
        - caption: Regions
          type: regionlist
          name: regions
          disableInactive: true
          selectFirstAvailable: false
          multiSelect: true
          stateful: false
          required: true
          dependsOn: ownerUid
          min: 3
          max: 3
          filter:
            isActive: true

    - caption: None
      inputType: hidden
      hidden: true
      type: list
      name: count
      dependsOn:                 
        scheme:
            slave:
              - value: 1
            master:    
              - value: 1
            galera-standalone:    
              - value: 1
            galera-cluster:    
              - value: 3
            xtradb-standalone:
              - value: 1
            xtradb-cluster:
              - value: 3

    - caption: Environment
      type: envname
      name: envName
      dependsOn: region
      randomName: true
      showFullDomain: false
      required: true

    - type: owner
      name: ownerUid
      caption: Owner

    - type: checkbox
      name: is_proxysql
      caption: Add ProxySQL for SQL Load Balancing
      value: true

    - type: checkbox
      caption: "Create separate environment group"
      name: envGroupEnabled
      value: true

      
globals:
  db_user: user-${fn.random}
  db_pswd: ${fn.password(20)}
  replica_user: repl-${fn.random}
  replica_pswd: ${fn.password(20)}
  orch_user: orch-${fn.random}
  orch_pswd: ${fn.password(20)}
  admin_user: admin-${fn.random}
  admin_pswd: ${fn.password(20)}
  
onInstall:
  - initGlobals
  - if ('${settings.envGroupEnabled}' == 'true'):
    - createEnvGroups
    - setGlobals:
        envGroups: "Database cluster ${settings.envName}"
  - createEnvs
  - initClusterLogic
  - setupGlobals
  - successGenerate
  
actions:
  createEnvGroups:
    - script: |
        import com.hivext.api.Response;
        let resp = jelastic.env.group.CreateGroup({
            session  : session,
            envGroup: "Database cluster ${settings.envName}",
            ownerUid: "${globals.ownerUid}"
          });
        if (resp.result != 0 && resp.result != Response.ENVIRONMENT_GROUP_ALREADY_EXISTS) return resp;
        return { result: 0 };

  initGlobals:
    - script: |
        var regions = '${settings.regions}'.split(','), index, resp,
            onAfterReturn = { setGlobals: {} }, 
            glbs = onAfterReturn.setGlobals;
        resp = jelastic.env.control.GetRegions(appid, session);
        if (resp.result != 0) return resp;
        resp = resp.array;
        for (var i = 0, n = regions.length; i < n; i ++) {
          index = i + 1;
          glbs["region-" + index] = regions[i];
          for (var a = 0, b = resp.length; a < b; a++) {
            for (var k = 0, l = resp[a].hardNodeGroups.length; k < l; k++) {
              if (resp[a].hardNodeGroups[k].uniqueName == regions[i]) {
                glbs["domain-" + index] = resp[a].domain;
                glbs["regionName-" + index] = resp[a].displayName;
              }
            }
          }
        }
        glbs["envGroups"] = eval('(' + MANIFEST + ')').envGroups;
        glbs["ownerUid"] = "${settings.ownerUid:}" || "${user.uid}";
        return { result: 0, onAfterReturn: onAfterReturn };

  createEnvs:
    - script: |
        var regions = '${settings.regions}'.split(','), actions = [];
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          actions.push({
            jps: "${baseUrl}/scripts/sqldb.jps?_r=${fn.random}",
            envName: "${settings.envName}-db-" + cluster,
            loggerName: "${settings.envName}-db-" + cluster,
            envGroups: "${globals.envGroups}",
            region: "${globals.region-" + cluster + "}",
            ownerUid: "${globals.ownerUid}",
            settings: {
              "db_user": "${globals.db_user}",
              "db_pswd": "${globals.db_pswd}",
              "replica_user": "${globals.replica_user}",
              "replica_pswd": "${globals.replica_pswd}",
              "stack": "${settings.stack}",
              "count": "${settings.count}",
              "tag": "${settings.tag}",
              "scheme": "${settings.scheme}"
            }
          });
        }
        if ('${settings.is_proxysql:true}' == 'true') {
          for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
            actions.push({
              jps: "${baseUrl}/scripts/proxysql.jps?_r=${fn.random}",
              envName: "${settings.envName}-lb-" + cluster,
              loggerName: "${settings.envName}-lb-" + cluster,
              envGroups: "${globals.envGroups}",
              region: "${globals.region-" + cluster + "}",
              ownerUid: "${globals.ownerUid}",
              settings: {
                "db_user": "${globals.db_user}",
                "db_pswd": "${globals.db_pswd}",
                "replica_user": "${globals.replica_user}",
                "replica_pswd": "${globals.replica_pswd}",
                "orch_user": "${globals.orch_user}",
                "orch_pswd": "${globals.orch_pswd}",
                "admin_user": "${globals.admin_user}",
                "admin_pswd": "${globals.admin_pswd}",
                "scheme": "${settings.scheme}"
              }
            });
          }
        }
        return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };

  initClusterLogic:
    - install: ${baseUrl}/addons/auto-cluster.yml?_r=${fn.random}
      envName: ${settings.envName}-db-1
      settings:
        db_user: ${globals.db_user}
        db_pswd: ${globals.db_pswd}
        replica_user: ${globals.replica_user}
        replica_pswd: ${globals.replica_pswd}
        orch_user: ${globals.orch_user}
        orch_pswd: ${globals.orch_pswd}
        admin_user: ${globals.admin_user}
        admin_pswd: ${globals.admin_pswd}
        scheme: ${settings.scheme}

  setupGlobals:
    - script: |
        var regions = '${settings.regions}'.split(','),
            onAfterReturn = { setGlobals: {} },
            glbs = onAfterReturn.setGlobals;
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          var resp = jelastic.env.control.GetEnvInfo('${settings.envName}-db-' + cluster, session);
          if (resp.result != 0) return resp;
          glbs["dbID-" + cluster] = resp.nodes[0].id;
          glbs["dbIP-" + cluster] = resp.nodes[0].address;
        }
        if ('${settings.is_proxysql:true}' == 'true') {
          for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
            var resp = jelastic.env.control.GetEnvInfo('${settings.envName}-lb-' + cluster, session);
            if (resp.result != 0) return resp;
            glbs["lbID-" + cluster] = resp.nodes[0].id;
            glbs["lbIP-" + cluster] = resp.nodes[0].address;
          }
        }
        return { result: 0, onAfterReturn: onAfterReturn };

  successGenerate:
    - script: |
        var regions = '${settings.regions}'.split(','),
            onAfterReturn = { setGlobals: {} },
            glbs = onAfterReturn.setGlobals,
            proxysql_text = "",
            proxysql_link = "",
            success_text = "";
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          if ('${settings.is_proxysql:true}' == 'true') {
            success_text += "**${globals.regionName-"+cluster+"}**: node${globals.lbID-"+cluster+"}-${settings.envName}-lb-"+cluster+".${globals.domain-"+cluster+"}:3306    \n";
          } else {
            success_text += "**${globals.regionName-"+cluster+"}**: node${globals.dbID-"+cluster+"}-${settings.envName}-db-"+cluster+".${globals.domain-"+cluster+"}:3306    \n";          
          }
        }
        if ('${settings.is_proxysql:true}' == 'true') {
          proxysql_text += "#### ProxySQL Web Panel    \n";
          proxysql_text += "**Username**: ${globals.admin_user}   \n";
          proxysql_text += "**Password**: ${globals.admin_pswd}   \n";
          for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
            proxysql_link = "https://node${globals.lbID-"+cluster+"}-${settings.envName}-lb-"+cluster+".${globals.domain-"+cluster+"}:4848";
            proxysql_text += "**${globals.regionName-"+cluster+"}**: ["+ proxysql_link +"]("+ proxysql_link +")    \n";
          }
        }
        glbs["success_text"] = success_text;
        glbs["proxysql_text"] = proxysql_text;
        return { result: 0, onAfterReturn: onAfterReturn };

success:
  text: |
    Multi-Region Database cluster **${settings.envName}** successfully installed.
    
    #### Entry point details:
    ${globals.success_text}
    
    #### Database credentials:   
    **Username**: ${globals.db_user}  
    **Password**: ${globals.db_pswd}  
    
    ${globals.proxysql_text}
    ___

    The instructions below can help you with the further managing your database cluster:

    - [Connect application to the database](https://docs.jelastic.com/database-connection)
    - [Share access to the environment](https://docs.jelastic.com/share-environment)
    - [Adjust vertical scaling settings](https://docs.jelastic.com/automatic-vertical-scaling)
    - [Monitor the statistics](https://docs.jelastic.com/view-app-statistics) & [view log files](https://docs.jelastic.com/view-log-files)
    - [Access environment via SSH](https://docs.jelastic.com/ssh-access)
