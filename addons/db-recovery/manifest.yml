type: update
id: multiregion-db-recovery
name: Multiregion Database Cluster Recovery
description:
  text: The Database Cluster Recovery add-on performs a comprehensive diagnostic of your Multiregion DB Cluster to detect any disruptions of the provisioned service. In case of errors, the automatic Cluster Recovery functionality can restore the cluster operability after most of the problems.
  short: The add-on performs a comprehensive diagnostic of your database cluster and can perform automatic recovery.
logo: https://cdn.jsdelivr.net/gh/jelastic-jps/mysql-cluster@master/addons/recovery/images/database-recovery.png

baseUrl: https://cdn.jsdelivr.net/gh/jelastic-jps/mysql-multiregion@master/addons/db-recovery

globals:
  install: ${settings.install:true}
  multiregional_utils: https://cdn.jsdelivr.net/gh/jelastic-jps/common@main/multiregional-cluster-utils
  app_id: multiregion-db-recovery
  ssh_root: /root/.ssh/
  ssh-key: id_rsa_db_monitoring
  nodeGroup: sqldb
  tmp: /tmp/
  diagnostic-failed: |-
    Errors were discovered during the Multiregion Database Cluster diagnostic.
    Please check the **/var/log/db_recovery.log** log file for details. Click the "Cluster Recovery" button in the add-on's tab for automatic recovery.
    Follow the [Manual Recovery](https://cdn.jsdelivr.net/gh/jelastic-jps/mysql-cluster@master/addons/recovery/docs/ManualRecoveryGuide.md) guide to recover the cluster manually.

targetNodes:
  nodeType:
    - mysql
    - mariadb-dockerized
    - mariadb
    - perconadb

mixins:
  - https://cdn.jsdelivr.net/gh/jelastic-jps/mysql-cluster@3.0.0/scripts/common.yml

onBeforeStop:  eventDiagnostic

buttons:
  - name: diagnostic
    caption: Cluster Diagnostic
    confirmText: Run cluster diagnostic?
    loadingText: Diagnostic is in progress...
    logsPath: /var/log/db_recovery.log
    action: diagnostic

  - name: recovery
    confirmText: |-
      It is recommended to create <u><i><b><a target="_blank" rel="noopener noreferrer" href="https://www.virtuozzo.com/application-platform-docs/database-backups/">database backup</a></b></i></u> before recovery. Run cluster recovery?
    caption: Cluster Recovery
    loadingText: Cluster recovery is in progress...
    successText: Cluster recovery is finished successfully!
    submitButtonText: Recover
    action: recovery

onInstall:
  if ('${globals.install}' == 'true'):
    - script: ${globals.multiregional_utils}/get-cluster-envs.js
      envName: ${env.envName}
    - setGlobals:
        DBEnvs: ${response.items.join(,)}
    - generate-share-keys

responses:
  200:
    type: success
    message: Database Cluster is OK! No errors have been discovered.

  201:
    type: success
    message: Database Cluster recovery has been finished successfully!

  98:
    type: success
    message: |
      An error occurs while recovering the Database Cluster.  
      Please check the **/var/log/db_recovery.log** log file for details.
      Follow the [Galera Cluster Recovery](https://docs.jelastic.com/mariadb-galera-recovery/) guide to recover the cluster manually.
  99:
    type: success
    message: |
      Errors were discovered during the Database Cluster diagnostic.
      Please check the **/var/log/db_recovery.log** log file for details. Click the "Cluster Recovery" button in the add-on's tab for automatic recovery.
      Follow the [Galera Cluster Recovery](https://docs.jelastic.com/mariadb-galera-recovery/) guide to recover the cluster manually.

actions:
  diagnostic:
    script: /scripts/db-recovery.js
    exec: ' --diagnostic'
    event: ${this.event:}
    
  eventDiagnostic:
    - script: ${globals.multiregional_utils}/get-cluster-envs.js
      envName: ${env.envName}
    - setGlobals:
        DBEnvs: ${response.items.join(,)}
    - script: |
        import com.hivext.api.server.system.service.utils.EnvironmentStatus;
        var envStatus, resp, clusterStatus = true;
        var envs = '${globals.DBEnvs}'.split(',');
        for (var i = 0, n = envs.length; i < n; i ++) {
          var resp = jelastic.env.control.GetEnvInfo(envs[i], session);
          if (resp.result != 0) return resp;
          status = resp.env.status;
          if (status != EnvironmentStatus['ENV_STATUS_TYPE_RUNNING'].getValue()) {
            clusterStatus = false;
            break;
          }
        }
        return {result:0, clusterStatus:clusterStatus};
    - if ('${response.clusterStatus}' == 'true'):
      - diagnostic:
          event: true
      - if (${response.errors} == true):
        - stopEvent:
            type: warning
            message: ${globals.diagnostic-failed}

  recovery:
    script: /scripts/db-recovery.js

  generate-share-keys:
    - script: |
        var envs = '${globals.DBEnvs}'.split(',');
        var delSSHkey = "[ -f ${globals.ssh_root}${globals.ssh-key} ] && rm -f ${globals.ssh_root}${globals.ssh-key}; [ -f ${globals.ssh_root}${globals.ssh-key}.pub ] && rm -f ${globals.ssh_root}${globals.ssh-key}.pub;";
        var delAUTHkey = "sed -i '/db_monitoring/d' ${globals.ssh_root}authorized_keys;";
        var genSSHkey = "ssh-keygen -t rsa -b 4098 -f ${globals.tmp}${globals.ssh-key} -q -N '' -C 'db_monitoring' <<<y >/dev/null 2>&1; chown jelastic ${globals.tmp}${globals.ssh-key}*";
        var shareSSHkey = "sed -i '/db_monitoring/d' ${globals.ssh_root}authorized_keys; mv ${globals.tmp}${globals.ssh-key}* ${globals.ssh_root}; cat ${globals.ssh_root}${globals.ssh-key}.pub >> ${globals.ssh_root}authorized_keys";
        var resp, key = "", pub = "";
        
        resp = api.environment.control.ExecCmdById({
          envName: "${env.name}",
          session: session,
          nodeid: "${nodes.sqldb.master.id}",
          userName: "root",
          commandList: toJSON([{"command": delSSHkey}, {"command": delAUTHkey}])
        });
        if (resp.result != 0) return resp;
        
        resp = api.environment.control.ExecCmdById({
          envName: "${env.name}",
          session: session,
          nodeid: "${nodes.sqldb.master.id}",
          userName: "root",
          commandList: toJSON([{"command": genSSHkey}])
        });
        if (resp.result != 0) return resp;
        
        resp = api.environment.file.Read({
          envName: "${env.name}",
          session: session,
          path: "${globals.tmp}${globals.ssh-key}.pub",
          nodeid: "${nodes.sqldb.master.id}" 
        });
        if (resp.result != 0) return resp;
        pub = resp.body;

        resp = api.environment.file.Read({
          envName: "${env.name}",
          session: session,
          path: "${globals.tmp}${globals.ssh-key}",
          nodeid: "${nodes.sqldb.master.id}" 
        });
        if (resp.result != 0) return resp;
        key = resp.body;

        for (var i = 0, n = envs.length; i < n; i ++) {
          resp =  api.environment.file.Write({
            envName: envs[i],
            session: session,
            path: "${globals.tmp}${globals.ssh-key}.pub",
            nodeGroup: "${globals.nodeGroup}",
            nodeid: "-1",
            body: pub
          });
          if (resp.result != 0) return resp;
                        
          resp = api.environment.file.Write({
            envName: envs[i],
            session: session,
            path: "${globals.tmp}${globals.ssh-key}",
            nodeGroup: "${globals.nodeGroup}",
            nodeid: "-1",
            body: key
          });
          if (resp.result != 0) return resp;
          
          resp = api.env.control.ExecCmdByGroup( envs[i], session, "${globals.nodeGroup}", toJSON([{ command: shareSSHkey }]), true, false, "root");
          if (resp.result != 0) return resp;
        }
        return {result: 0};
