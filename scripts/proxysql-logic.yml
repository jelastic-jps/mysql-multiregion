type: update
id: proxysql-multiregion-logic
name: ProxySQL MultiRegion Logic

globals:
  cdnUrl: https://cdn.jsdelivr.net/gh
  db_user: ${settings.db_user:user-[fn.random]}
  db_pswd: ${settings.db_pswd:[fn.password(20)]}
  replica_user: ${settings.replica_user:repl-[fn.random]}
  replica_pswd: ${settings.replica_pswd:[fn.password(20)]}
  orch_user: ${settings.orch_user:orch-[fn.random]}
  orch_pswd: ${settings.orch_pswd:[fn.password(20)]}
  admin_user: ${settings.admin_user:admin-[fn.random]}
  admin_pswd: ${settings.admin_pswd:[fn.password(20)]}
  scheme: ${settings.scheme:slave}

onInstall:
  - setupCluster
  - initProxyReplication

actions:
  initProxyReplication:
    script: |
      var DBEnvs = '${settings.DBEnvs}'.split(',');
      var ProxyEnvs = '${settings.ProxyEnvs}'.split(',');
      var api = [], 
          primaryIPs = [],
          secondaryIPs = [],
          galeraIPs = [],
          commandList = [],
          primaryToProxyCmd,
          secondaryToProxyCmd,
          galeraToProxyCmd,
          resp;

      function getEnvMasterIp(env) {
        var resp = jelastic.env.control.GetEnvInfo(env, session);
        if (resp.result != 0) return resp;
        for (var l = 0, k = resp.nodes; l < k.length; l++) {
          if (k[l].nodeGroup == 'sqldb' && k[l].ismaster) return k[l].address;
        }
        return {result: 0}
      }

      function getEnvDbIPs(env) {
        var IPs = [];
        var resp = jelastic.env.control.GetEnvInfo(env, session);
        if (resp.result != 0) return resp;
        for (var l = 0, k = resp.nodes; l < k.length; l++) {
          if (k[l].nodeGroup == 'sqldb') IPs.push(k[l].address);
        }
        return IPs;
      }

      for (var i = 0, n = DBEnvs.length; i < n; i ++) {
        if (/slave/.test('${globals.scheme}')) {
          (/-db-1/.test(DBEnvs[i])) ? primaryIPs.push(getEnvMasterIp(DBEnvs[i])) : secondaryIPs.push(getEnvMasterIp(DBEnvs[i]))
        }
        if (/master/.test('${globals.scheme}')) {
          (/-db-1/.test(DBEnvs[i]) || /-db-2/.test(DBEnvs[i])) ? primaryIPs.push(getEnvMasterIp(DBEnvs[i])) : secondaryIPs.push(getEnvMasterIp(DBEnvs[i]))
        }
        if (/galera/.test('${globals.scheme}') || /xtradb/.test('${globals.scheme}')) {
          galeraIPs.push(getEnvDbIPs(DBEnvs[i]));
        }
      }
      
      for (var i = 0, n = primaryIPs.length; i < n; i ++) {
        primaryToProxyCmd = "MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e \"INSERT INTO mysql_servers (hostgroup_id,hostname,port,weight) VALUES (10, '" + primaryIPs[i] + "', 3306,1)\";";
        secondaryToProxyCmd = "MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e \"INSERT INTO mysql_servers (hostgroup_id,hostname,port,weight) VALUES (11, '" + primaryIPs[i] + "', 3306,1)\";";
        commandList.push({"command": primaryToProxyCmd});
        commandList.push({"command": secondaryToProxyCmd});
      }
      
      for (var i = 0, n = secondaryIPs.length; i < n; i ++) {
        secondaryToProxyCmd = "MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e \"INSERT INTO mysql_servers (hostgroup_id,hostname,port,weight) VALUES (11, '" + secondaryIPs[i] + "', 3306,1)\";";
        commandList.push({"command": secondaryToProxyCmd})
      }
      
      galeraIPs = [].concat.apply([], galeraIPs);
      for (var i = 0, n = galeraIPs.length; i < n; i ++) {
        galeraToProxyCmd = "MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e \"INSERT INTO mysql_servers (hostgroup_id,hostname,port,weight) VALUES (2, '" + galeraIPs[i] + "', 3306,1)\";";
        commandList.push({"command": galeraToProxyCmd})
      }

      commandList.push({"command": "MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e \"LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK\";"})
      
      for (var i = 0, n = ProxyEnvs.length; i < n; i ++) {
        api.push({
          method: "env.control.ExecCmdByGroup",
            envName: ProxyEnvs[i],
            nodeGroup: "proxy",
            commandList: commandList
        });
      }
      
      return { result: 0, onAfterReturn: { api: api } }    

  setupCluster:
    script: |
      var ProxyEnvs = '${settings.ProxyEnvs}'.split(','), actions = [];
      for (var i = 0, n = ProxyEnvs.length; i < n; i ++) {
        actions.push({
          jps: "${baseUrl}/proxysql-configuration.yml?_r=${fn.random}",
          envName: ProxyEnvs[i],
          settings: {
            db_user: "${globals.db_user}",
            db_pswd: "${globals.db_pswd}",
            replica_user: "${globals.replica_user}",
            replica_pswd: "${globals.replica_pswd}",
            orch_user: "${globals.orch_user}",
            orch_pswd: "${globals.orch_pswd}",
            admin_user: "${globals.admin_user}",
            admin_pswd: "${globals.admin_pswd}",
            scheme: "${globals.scheme}"
          }
        })
      }
      return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };
